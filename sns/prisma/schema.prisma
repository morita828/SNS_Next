// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int      @id @default(autoincrement())
  username   String   @db.VarChar(255)
  mail       String   @db.VarChar(255) @unique
  password   String   @db.VarChar(255)
  bio        String?  @db.VarChar(400)
  images     String?  @db.VarChar(255) @default("icon1.png")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // ✅ users ⇄ posts（1:N）
  posts      posts[]

  // ✅ users ⇄ follows（1:N）
  following  follows[] @relation("FollowingRelation")
  followedBy follows[] @relation("FollowedRelation")
}

model posts {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post       String   @db.VarChar(400)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // ✅ users テーブルと関連付け（user_id を参照）
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@index([user_id])
}

model follows {
  id           Int      @id @default(autoincrement())
  following_id Int
  followed_id  Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // ✅ `users.id` に外部キーを設定（`fields` & `references` を指定）
  follower users @relation("FollowingRelation", fields: [following_id], references: [id], onDelete: Cascade)
  followed users @relation("FollowedRelation", fields: [followed_id], references: [id], onDelete: Cascade)

  // ✅ インデックス & 重複防止
  @@index([following_id])
  @@index([followed_id])
  @@unique([following_id, followed_id])
}
